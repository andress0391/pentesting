#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import os

from BALANCEADOR import Balancear
from fabrica.fabricaSess import FabSess
from fabrica.fabricaConfig import FabConfig
from fabrica.fabricaClient import FabClient
from fabrica.fabricaAuthn import FabAuthn
from fabrica.fabricaInfo import FabInfo
from fabrica.fabricaCrypst import FabCrypst
from fabrica.fabricaAuthz import FabAuthz
from fabrica.fabricaInpval import FabInpval
from fabrica.fabricaErr import FabErr
from fabrica.fabricaIdent import FabIdent
from fabrica.fabricaBuslogic import FabBuslogic
from bridge.ejecutarPrueba import EjecutarPrueba
from src.modelo.pentest import Pentest

class Facade(object):
    def __init__(self, url, pruebas, login, usuarioPrueba, riesgos, cpus=0):
        self.url = url
        self.pruebas = pruebas
        self.login = login
        self.usuarioPrueba = usuarioPrueba
        self.riesgos = riesgos
        self.riesgosSubcat = None

        self.cpus = cpus
        self.balancer = None
        if os.path.isdir(os.path.dirname(os.path.realpath(__file__))+"/src/Salida") is False:
            os.mkdir(os.path.dirname(os.path.realpath(__file__))+"/src/Salida")
    
    def separarRiesgos(self):
        if self.riesgosSubcat == None:
            subcategorias = self.riesgos.split(",")
            self.riesgosSubcat = list()
            for s in subcategorias:
                tmp = s.split(":")
                self.riesgosSubcat.append( {tmp[0] : float(tmp[1])} )
        else:
            pass
    
    def separarPruebas(self):
        self.pruebas = self.pruebas.split(",")
    
    def obtenerInfo(self):
        self.separarRiesgos()
        info = FabInfo(self.url).obtenerProcesos(riesgoNegocio=self.riesgosSubcat[0].get("info"))
        return self.balancearProcesos(info)
    
    def repartir(self):
        self.separarRiesgos()
        del self.riesgosSubcat[0]

        self.separarPruebas()
        pruebas = self.pruebas
        procesos = list()
        for i in pruebas:
            if i == "config":
                config = FabConfig(self.url).obtenerProcesos(riesgoNegocio=self.riesgosSubcat[0].get('config'))
                del self.riesgosSubcat[0]
                procesos += config
            elif i == "ident":
                ident = FabIdent(self.url).obtenerProcesos(riesgoNegocio=self.riesgosSubcat[0].get('ident'))
                del self.riesgosSubcat[0]
                procesos += ident
            elif i == "authn":
                authn = FabAuthn(self.login).obtenerProcesos(riesgoNegocio=self.riesgosSubcat[0].get('authn'))
                del self.riesgosSubcat[0]
                procesos += authn
            elif i == "authz":
                authz = FabAuthz(self.url).obtenerProcesos()
                del self.riesgosSubcat[0]
                procesos +=authz
            elif i == "sess":
                sess = FabSess(self.url, self.login, self.usuarioPrueba).obtenerProcesos()
                del self.riesgosSubcat[0]
                procesos += sess
            elif i == "inpval":
                inpval = FabInpval("").obtenerProcesos()
                del self.riesgosSubcat[0]
                procesos += inpval
            elif i == "err":
                err = FabErr(self.url).obtenerProcesos()
                del self.riesgosSubcat[0]

                procesos += err                
            elif i == "crypst":
                crypst = FabCrypst(self.url).obtenerProcesos()
                del self.riesgosSubcat[0]

                procesos += crypst
            elif i == "buslogic":
                buslogic = FabBuslogic(self.url).obtenerProcesos()
                del self.riesgosSubcat[0]

                procesos += buslogic
            elif i == "client":
                client = FabClient(self.url).obtenerProcesos(riesgoNegocio=self.riesgosSubcat[0].get('client'))
                del self.riesgosSubcat[0]

                procesos += client
            else:
                print("ERROR SELECCIONANDO LAS SUBACATEGOR√çAS!")
        return self.balancearProcesos(procesos)
    
    def ejecutar(self, procesos):
        ep = EjecutarPrueba(procesos)
        return ep.ejecutarPrueba()
    
    def balancearProcesos(self, procesos):
        self.balancer = Balancear(self.cpus, procesos)
        self.balancer.main()
        return self.balancer.resultado
    
    def obtenerPentest(self):
        p = Pentest()
        datos = p.getLastRecord()
        p.id = datos[0]
        p.url_ip = datos[1]
        p.fecha_Ini = datos[2]
        
        return p
    
    def crearPentest(self):
        p = Pentest()
        p.insert(self.url)
        p = self.obtenerPentest()

    def crearPentest2(self, id_pentest):
        p = Pentest()
        p = self.obtenerPentest2(id_pentest)
    
    def obtenerPentest2(self, id_pentest):
        p = Pentest()
        datos = p.getById(id_pentest)
        p.id = datos[0]
        p.url_ip = datos[1]
        p.fecha_Ini = datos[2]
        
        return p
