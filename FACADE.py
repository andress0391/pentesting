#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import socket
import os
from urllib.parse import urlparse

from BALANCEADOR import Balancear
from fabrica.fabricaSess import FabSess
from fabrica.fabricaConfig import FabConfig
from fabrica.fabricaClient import FabClient
from fabrica.fabricaAuthn import FabAuthn
from fabrica.fabricaInfo import FabInfo
from fabrica.fabricaCrypst import FabCrypst

class Facade(object):
    def __init__(self, url, pruebas, login, usuarioPrueba, cpus=0):
        self.url = url
        self.ip = None
        self.pruebas = pruebas
        self.login = login
        self.usuarioPrueba = usuarioPrueba
        self.cpus = cpus
        '''
        if os.path.isdir(os.path.dirname(os.path.realpath(__file__))+"/src/Salida") is False:
            os.mkdir(os.path.dirname(os.path.realpath(__file__))+"/src/Salida")
        '''
    
    def separarPruebas(self):
        self.pruebas = self.pruebas.split(",")
    
    def obtenerIP(self):
        u = urlparse(self.url)
        url = u.netloc
        self.ip = socket.gethostbyname(url)
    
    def obtenerInfo(self):
        self.obtenerIP()
        info = FabInfo(self.ip).obtenerProcesos()
        return info
    
    def repartir(self):
        self.separarPruebas()
        pruebas = self.pruebas
        procesos = list()
        # procesos += self.obtenerInfo()
        for i in pruebas:
            if i == "config":
                config = FabConfig(self.url).obtenerProcesos()
                procesos += config
            elif i == "ident":
                pass
            elif i == "authn":
                authn = FabAuthn(self.login).obtenerProcesos()
                procesos += authn
            elif i == "authz":
                pass
            elif i == "sess":
                sess = FabSess(self.url, self.usuarioPrueba).obtenerProcesos()
                procesos += sess
            elif i == "inpval":
                pass
            elif i == "err":
                pass
            elif i == "crypst":
                self.obtenerIP()
                crypst = FabCrypst(self.ip).obtenerProcesos()
                procesos += crypst
            elif i == "buslogic":
                pass
            elif i == "client":
                client = FabClient(self.url).obtenerProcesos()
                procesos += client
            else:
                print("ERROR")
        balancer = Balancear(self.cpus, procesos)
        #balancer = Balancear(3, procesos)
        balancer.main()
        return balancer.resultado
    
