#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import socket
import os

from BALANCEADOR import Balancear
from fabrica.fabricaSess import FabSess
from fabrica.fabricaConfig import FabConfig
from fabrica.fabricaClient import FabClient
from fabrica.fabricaAuthn import FabAuthn
from fabrica.fabricaInfo import FabInfo
from fabrica.fabricaCrypst import FabCrypst
from fabrica.fabricaAuthz import FabAuthz
from fabrica.fabricaInpval import FabInpval
from fabrica.fabricaBuslogic import FabBuslogic
from bridge.ejecutarPrueba import EjecutarPrueba
from src.modelo.pentest import Pentest

class Facade(object):
    def __init__(self, url, pruebas, login, usuarioPrueba, cpus=0):
        self.url = url
        self.pruebas = pruebas
        self.login = login
        self.usuarioPrueba = usuarioPrueba
        self.cpus = cpus
        self.balancer = None
        if os.path.isdir(os.path.dirname(os.path.realpath(__file__))+"/src/Salida") is False:
            os.mkdir(os.path.dirname(os.path.realpath(__file__))+"/src/Salida")
    
    def separarPruebas(self):
        self.pruebas = self.pruebas.split(",")
    
    def obtenerInfo(self):
        info = FabInfo(self.url).obtenerProcesos()
        return self.balancearProcesos(info)
    
    def repartir(self):
        self.separarPruebas()
        pruebas = self.pruebas
        procesos = list()
        for i in pruebas:
            if i == "config":
                config = FabConfig(self.url).obtenerProcesos()
                procesos += config
            elif i == "ident":
                pass
            elif i == "authn":
                authn = FabAuthn(self.login).obtenerProcesos()
                procesos += authn
            elif i == "authz":
                authz = FabAuthz(self.url).obtenerProcesos()
                procesos +=authz
            elif i == "sess":
                sess = FabSess(self.url, self.usuarioPrueba).obtenerProcesos()
                procesos += sess
            elif i == "inpval":
                inpval = FabInpval("").obtenerProcesos()
                procesos += inpval
            elif i == "err":
                pass
            elif i == "crypst":
                crypst = FabCrypst(self.url).obtenerProcesos()
                procesos += crypst
            elif i == "buslogic":
                buslogic = FabBuslogic(self.url).obtenerProcesos()
                procesos += buslogic
            elif i == "client":
                client = FabClient(self.url).obtenerProcesos()
                procesos += client
            else:
                print("ERROR")
        return self.balancearProcesos(procesos)
    
    def ejecutar(self, procesos):
        ep = EjecutarPrueba(procesos)
        return ep.ejecutarPrueba()
    
    def balancearProcesos(self, procesos):
        self.balancer = Balancear(self.cpus, procesos)
        self.balancer.main()
        return self.balancer.resultado
    
    def crearPentest(self):
        p = Pentest()
        p.insert(self.url)

        datos = p.getLastRecord()
        p.id = datos[0]
        p.url_ip = datos[1]
        p.fecha_Ini = datos[2]
