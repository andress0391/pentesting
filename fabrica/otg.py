#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from abc import ABCMeta, abstractmethod
from src.modelo.detalle import Detalle
from src.modelo.prueba import Prueba
from src.modelo.pentest import Pentest

class OTG(metaclass=ABCMeta):
    def __init__(self, dependencia, otg):
        p = Prueba().getByCodigo(otg)
        self.pentest = Pentest()
        self.detalles = Detalle(id_pentest=self.pentest.id, id_prueba=p.id)
        self.dependencia = dependencia
    
    @abstractmethod
    def main(self):
        raise NotImplementedError

    def obtenerResultado(self, otg, id_pentest):
        resultado = self.detalles.getResultado(otg, id_pentest)[0]
        resultado = resultado.split("\n")
        res = self.verify_url(resultado)
        return res
    
    def adicionarRecomendaciones(self, recomendaciones):
        self.detalles.recomendacion += recomendaciones+"\n"

    def adicionarRiesgo(self, riesgo):
        self.detalles.riesgo = riesgo
    
    def adicionarResultado(self, res):
        self.detalles.resultado += res + "\n"
    
    def almacenarBD(self):
        self.detalles.insert(self.detalles)

    def verify_url(self,lst_url):
        lsr_url_clean = list()
        for url in lst_url:
            if url !="":
                lsr_url_clean.append(url)
        
        return lsr_url_clean

