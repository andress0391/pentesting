#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import os
import argparse
import time

from mpi4py import MPI
from FACADE import Facade

path = os.path.dirname(os.path.realpath(__file__))

comm = MPI.COMM_WORLD
rank = comm.rank
size = comm.size
name = MPI.Get_processor_name()

parser = argparse.ArgumentParser()
parser.add_argument("--pruebas", help="display a square of a given number",type=str)
parser.add_argument("--url", help="URL del sitio. Ej: http://www.example.com",type=str)
parser.add_argument("--login", help="URL del sitio. Ej: http://www.example.com/login.html",type=str)
parser.add_argument("--usuario", help="Usuario de prueba. Ej: usuario1,password1",type=str)

args = parser.parse_args()
    
url = args.url
login = args.login
up = args.usuario
pruebas = args.pruebas

f = Facade(url, pruebas, login, up, size)

t_ini = None
# RANK 0
if rank == 0:
    f.crearPentest()
    t_ini = time.time()
    info = f.obtenerInfo()

else:
    info = None

info = comm.scatter(info, root=0)

f.obtenerPentest()
print("Rank {} ({}) tiene:{}".format(rank, name, info))
resultado = list()
resultado = f.ejecutar(info)

newData = comm.gather(resultado, root=0)

if rank == 0:
    t_fin = (time.time() - t_ini)
    print("Tiempo total: %s" % t_fin)

'''
else:
    procesos = None

procesos = comm.scatter(procesos, root=0)

print("Rank {} tiene:{}".format(rank, procesos))

resultado = list()
for i in procesos:
    resultado.append(i.main())
    #i.main()

newData = comm.gather(resultado, root=0)

if rank == 0:
    t_fin = (time.time() - t_ini)
    print("Tiempo total: %s" % t_fin)
'''
