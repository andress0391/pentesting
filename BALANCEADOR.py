#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from src.authentication.authn_003 import Authn_003
from src.client_side.client_009 import Client_009
from src.cryptography.crypst_001 import Crypst_001
from src.configuration_deploy_management.config_006 import Config_006
from src.configuration_deploy_management.config_007 import Config_007

class Balancear(object):
    def __init__(self, cpus):
        self.cpus = cpus
        self.resultado = list()

    def main(self):
        # Importar procesos
        procesos = self.importarProcesos()
        # Se ordenan de mayor a menor
        procesos.sort(reverse=False, key=lambda p: p.complejidad)
        tareas = len(procesos)
        # Se determina la cantidad de tareas por cpu
        tamBloque = round(tareas/self.cpus)+1

        self.generarBloques()
        self.distribuirProcesos(procesos, tamBloque)
        #print(self.resultado)
        self.imprimir(self.resultado[0])
        self.imprimir(self.resultado[1])
        self.imprimir(self.resultado[2])
    
    def imprimir(self, lista):
        for x in lista:
            print(x.complejidad)
        print("------")
    
    def importarProcesos(self):
        procesos = list()
        procesos.append(Authn_003("",""))
        procesos.append(Client_009(""))
        procesos.append(Crypst_001(""))
        procesos.append(Config_006(""))
        procesos.append(Config_007(""))
        return procesos

    def generarBloques(self):
        for c in range(self.cpus):
            self.resultado.append(list())

    def distribuirProcesos(self, procesos, tamBloque):
        i = 0
        for p in procesos:
            if len(self.resultado[i]) <= tamBloque:
                self.resultado[i].append(p)
            i += 1
            i = i%self.cpus

b = Balancear(3)
b.main()
