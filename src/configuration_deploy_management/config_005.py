#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import os
import subprocess
import time
from urllib.parse import urlparse
from multiprocessing import Process
from fabrica.otg import OTG

__otg__ = "OTG-CONFIG-005"

class Config_005(OTG):
    def __init__(self, url, dependencia=None, riesgoNegocio=0.0):
        super().__init__(dependencia, __otg__, riesgoNegocio)
        self.url = url
        self.dirsearch = os.getcwd() + "/terceros/dirsearch/dirsearch.py"
        self.salida = os.getcwd() + "/src/Salida/"+ str(self.pentest.id) +"adminInterfaces.txt"
        self.diccionario = os.getcwd() + "/diccionarios/adminInterfaces/admin.txt"
        self.extensiones = "php,jsp,jsf,xml,aspx,asp,erb,rb,sh,pl,txt,bak,sql"
        self.complejidad = 2
    
    def ejecutarDirsearch(self):
        with open(os.devnull, "w+") as f:
            subprocess.call([self.dirsearch +' --plain-text-report='+ self.salida + " -w " + self.diccionario + " -u " + self.url + " -e " + self.extensiones + " -x 500,502,401,403,400,404"],
                            shell=True,
                            stdout=f,
                            stderr=subprocess.STDOUT)
        f.close()
    
    def obtenerDirectoriosCrawler(self, urls):
        u = None
        resultado =list()
        for url in urls:
            u = urlparse(url)
            resultado.append(u.path)
        return resultado
    
    def obtenerDirectoriosSalida(self):
        resultado = list()
        with open(self.salida,'r') as f:
            contenido = f.readlines()
        f.close()

        tmp = None
        tmp2 = None
        for i in contenido:
            tmp = i.index("http")
            tmp2 = i[tmp:-1]
            resultado.append(urlparse(tmp2).path)
        return resultado
    
    def comparar(self, urlsCrawler, urlsSalida):
        resultado = urlsSalida
        for i in urlsCrawler:
            for j in urlsSalida:
                if i == j:
                    resultado.remove(j)
        return resultado
    
    def examinar(self, pathsEncontrados):
        if not pathsEncontrados:
            msj = "No se encontraron directorios ocultos accesibles"
            print(msj)
        else:
            u = urlparse(self.url)
            url = u.scheme + "://" + u.netloc
            msj = "Las siguientes url ocultas fueron encontradas:"
            print(msj)
            self.adicionarResultado(msj)
            for i in pathsEncontrados:
                print(url + i)
                self.adicionarResultado(url + i)
            # MENSAJE
    
    def main(self):
        print("================ Inicio prueba OTG-CONFIG-005 ==================\n")
        #urlsCrawler = self.obtenerDirectoriosCrawler(self.obtenerResultado("OTG-INFO-007", 165)[:-2])
        urlsCrawler = self.obtenerDirectoriosCrawler(self.obtenerResultado("OTG-INFO-007", self.pentest.id)[:-2])

        p = Process(target=self.ejecutarDirsearch)
        p.start()
        mensaje = "Ejecutando enumeraci√≥n de interfaces de administrador"
        print(mensaje)
        p.join()

        urlsSalida = self.obtenerDirectoriosSalida()
        self.examinar(self.comparar(urlsCrawler, urlsSalida))

        if self.detalles.resultado != "":
            self.adicionarRecomendaciones("")
            self.calcularRiesgo(__otg__, self.riesgoNegocio)

            self.almacenarBD()


        print("\n================ Fin prueba OTG-CONFIG-005 ==================\n")


# a = Config_005("https://simca.unicauca.edu.co/simca/")
# a.main()