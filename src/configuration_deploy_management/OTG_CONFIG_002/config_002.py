

import subprocess
from subprocess import Popen, PIPE
from src.configuration_deploy_management.OTG_CONFIG_002.pycvesearch.core import CVESearch
from fabrica.otg import OTG


#Config-001 y 002
__otg__ = "OTG-CONFIG-002"
__lst_id__ = list()
__lst_ref__ = list()
__lst_vuln__ = ["drupal/6.0","jquery/2.0"]
#__lst_vuln__ = ["apache"]


class CONFIG_002(OTG):

    def __init__(self,url,dependencia=None):
        print("Detectando vulnerabilidades de seguridad conocidas ...\n")
        super().__init__(dependencia,__otg__)
        self.url = url     
    
    def search_vuln(self,tech):        
        cve = CVESearch()
        res = cve.search(tech)
        resultado = ''.join(map(str, res))
        lst_res = resultado.split(",")
        self.filter_CVE(lst_res,tech)
    
    def filter_CVE(self,lst_res,tech):
        
        for x in lst_res:
            if "'id'" in x:
                cve = self.char_remove(x)
                __lst_id__.append(cve)
            if "'references'" in x:
                ref = self.ref_remove(x)
                __lst_ref__.append(ref)

        lst_id,lst_ref = self.top5_CVE(__lst_id__,__lst_ref__)
        self.lst_recorrer(lst_id,lst_ref,tech)
    
    def top5_CVE(self,lst_id,lst_ref):
        tam_id = len(lst_id)
        tam_ref = len(lst_ref)
        if tam_id > 5 and tam_ref > 5:
            del lst_id[5:]
            del lst_ref[5:]
            return lst_id,lst_ref
        else:
            return lst_id,lst_ref


    
    def lst_recorrer(self,lst_id,lst_ref,tech):
        find_tech = False
        encontro = ""
        tam = len(lst_id)
        if tam != 0:
            cadena = "Vulnerabilidades de seguridad conocidas para: {}\n".format(tech)
            encontro += cadena
            #print(cadena)
            for x in zip(lst_id,lst_ref):
                find_tech = True
                tmp = str(x)
                encontro += tmp + "\n"
                #print(x)
            print(encontro)                
            print("-----------------------------------------------------------------------------")
            if find_tech:
                self.adicionarResultado(encontro)
            del __lst_id__[:]
            del __lst_ref__ [:]

        else:
            cadena = "No se han detectado vulnerabilidades de seguridad conocidas para {}".format(tech)
            #self.adicionarResultado(cadena)
            print(cadena)
            print("-----------------------------------------------------------------------------")

        

    def ref_remove(self,cadena):
        ref_tmp = cadena.split("[")
        ref = ref_tmp[1]
        tmp = ref.strip("'")
        return tmp

    def char_remove(self,cadena):
        cve_tmp = cadena.split(":")
        cve = cve_tmp[1]
        tmp = cve.lstrip()
        tmp1 = tmp.strip("'") 
        return tmp1
    
    def res_split(self):
        lst_vuln = list()
        res2  = self.obtenerResultado("OTG-INFO-002",self.pentest.id)
        #print("id pentest{}".format(self.pentest.id))
        res1 = str(res2)
        res = res1.split(":")
        tam =len(res)
        #print("tamanio:{}".format(tam))
        #print("res es:{}".format(res[2]))
        if tam != 0:
            for x in res:
                #print("pos de res{}".format(x))
                if "versión" in x:
                    res_full = ""
                    #print("uni con version{}".format(x))
                    res_tech = self.tech_split(x)
                    res_ver  = self.version_res_split(x)
                    res_full = res_tech + "/" + res_ver
                    #print("resultado full{}".format(res_full))
                    lst_vuln.append(res_full)
                    
            
            return lst_vuln

        else:
            
            return 0

    def tech_split(self,cadena):
        res = cadena.split(",")
        minus = res[0]
        res_full = minus.lower()
        #print("tecnología retornada:{}".format(res_full))
        return res_full
        
    def version_res_split(self,cadena):
        res = cadena.split("=>")
        res_tmp = res[1]
        r = res_tmp.split(",")
        res_fl = r[0]
        res_fill = res_fl[0:3]
        #print("version retornada{}".format([res_fill]))
        return res_fill
    
    def main(self):
        lst_res = self.res_split()
        if lst_res !=0:
            for x in lst_res:
                self.search_vuln(x)
        if self.adicionarResultado != "":
            self.adicionarRecomendaciones("Restringir el acceso a los archivos de prueba para no obtener la versión de las tecnologías y conseguir una respuesta por parte del servidor de tipo 404 Not Found.")
            self.adicionarRiesgo(4)
            self.almacenarBD()
        



