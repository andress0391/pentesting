# -*- coding: utf-8 -*-

import os
import urllib.request
from fabrica.otg import OTG
from src.input_validation.Input_validation_testing.inpval_005_template import Inpval_005_template
import requests

__otg__ = "OTG-ERR-001"

#Descripción: A menudo, durante una prueba de penetración en las aplicaciones web, se encuentran con muchos códigos de error generados desde aplicaciones o servidores web. Es posible hacer que estos errores se muestren mediante el uso de solicitudes particulares, especialmente diseñadas con herramientas especializadas
#o generados manualmente.

#Objetivo: Encontrar los diferentes códigos de error, ya que revelan mucha información sobre bases de datos, errores y otros componentes tecnológicos directamente relacionados con las aplicaciones web.

class ERR_001(OTG):

    def __init__(self, url,dependencia=None):
        super().__init__(dependencia, __otg__)
        self.url = url
        self.ruta = os.getcwd() + "/src/input_validation/Input_validation_testing/payloads/"
        self.name = "payload_err.txt"
    
    def send_request(self):

        payloads = self.get_payloads(self.name)
        urls = self.query_crawler()

        for url in urls:
            for payload in payloads:
                try:
                    full_url = url+ payload
                    r = requests.get(full_url)
                    p = requests.put(full_url)
                    status_get = r.status_code
                    status_put = p.status_code
                    self.verify_errors(status_get,full_url)
                    self.verify_errors(status_put,full_url)
                    
                except requests.exceptions.RequestException as e:
                    print(e)
                    #sys.exit(1)
    
    def verify_errors(self,status,url):
        global_error = ""
        if status == 404:
            error = "Error 404, el protocolo de Internet HTTP no se ha cumplido de manera correcta\nMétodo utilizado: Get\nRecurso: {}".format(url)
            print(error)        
            global_error +=error 
        if status == 405:
            error = "Error 405 Método no permitido\nMétodo utilizado: put\nURL: {}".format(url)
            print(error)
            global_error +=error
        if status == 407:
            error = "Error 407 se requiere autenticación de proxy\nURL: {}".format(url)
            print(error)
            global_error +=error            
        if status == 500:
            error = "Error 500 ocurrió un fallo interno en el servidor\nURL: {}".format(url)
            
            print(error)
            global_error +=error        
        if status == 501:
            error = "Error 501, el servidor no responde debido a que la petición no es soportada por el servidor\nURL: {}".format(url)
            print(error)
            global_error +=error
        
        if global_error !="":
            self.adicionarResultado(global_error)


    def get_payloads(self,name_file):
        #fname = "payloadSQL.txt"
        with open(self.ruta+name_file) as f:
            content = f.readlines()
        payloads = [x.strip() for x in content]
        return payloads 

    def query_crawler(self):
        urls = self.obtenerResultado("OTG-INFO-007",self.pentest.id)
        return urls

    def main(self):
        print("================ Iniciando prueba OTG-ERR-001 ==================\n")
        self.send_request()
        print("================ Fin prueba OTG-INPVAL-ERRR-001 ==================\n")
    	# url = "http://www.tunesoman.com/product.php?id="
    	# sql(url)
        if self.adicionarResultado !="":
            recomendacion1 = "Es importante redirigir las páginas de error hacia otra ubicación de la aplicación web o personalizar las pagínas con los códigos de error."
            recomendacion2 = "Sanitizar las entradas por el usuario para un recurso que no se encuentre disponible en la aplicación web."
            self.adicionarRecomendaciones(recomendacion1)
            self.adicionarRecomendaciones(recomendacion2)
            self.riesgo(4)
            self.almacenarBD()
    