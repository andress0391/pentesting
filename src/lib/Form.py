#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from terceros.loginform import fill_login_form
from urllib.parse import urlparse
import copy

class Form(object):
    def __init__(self):
        self.metodoForm = ""
        self.accionForm = ""
        self.camposForm = list()

    def obtenerForm(self, url, html):
        '''
        Método que se encarga de identificar la etiqueta del form para el inicio de sesión.
        '''
        separador = "/"
        accion, metodo = fill_login_form(url, html)
        tmp = urlparse(accion).path
        tmp = tmp.split(separador)

        i = len(tmp)-1
        parametro = tmp[i]
        
        accionForm = self.__accion(parametro, i, 0, list(), html, tmp)
        if accionForm == -1:
            self.accionForm = accion
        else:
            self.accionForm = accionForm
        self.metodoForm = metodo
    
    def __accion(self, parametro, i, j, encontrado, html, tmp, separador="/"):
        '''
        Retorna la acción (action), donde se enviarán los datos para realizar el inicio de sesión
        '''
        if i == 0:
            return -1
        if not encontrado:
            buscar = 'action="'+parametro+'"'
            aux = self.substring_indexes(buscar, html)
            if len(aux) == 0 and j == 0:
                j = j+1
                return self.__accion(separador+parametro , i , j , aux , html, tmp)
            elif len(aux) == 0 and j == 1:
                i = i-1
                return self.__accion(tmp[i]+parametro , i , 0 , aux , html, tmp)
            else:
                return parametro
        else:
            return parametro

    # https://github.com/MechanicalSoup/MechanicalSoup/blob/master/mechanicalsoup/form.py
    # Nombre del método original -> print_summary
    def obtenerCampos(self, form):
        '''
        Print a summary of the form.
        May help finding which fields need to be filled-in.
        '''
        listaCampos = list()
        for input in form.find_all(("input", "textarea", "select")):
            input_copy = copy.copy(input)
            # Text between the opening tag and the closing tag often
            # contains a lot of spaces that we don't want here.
            for subtag in input_copy.find_all() + [input_copy]:
                if subtag.string:
                    subtag.string = subtag.string.strip()
            # Cada campo se agrega a la lista como String (str)
            listaCampos.append(str(input_copy))

        return listaCampos

    def obtenerCamposEditbles(self):
        '''
        Obtiene los campos que pueden ser editables, es decir,
        lo campos que según el tipo (type) no sea hidden o submit.
        '''
        camposEditables = list()
        for i in self.camposForm:
            if (i.campoType != 'hidden') and (i.campoType != 'submit'):
                camposEditables.append(i)
        return camposEditables

    def substring_indexes(self, substring, string):
        '''
        Generate indices of where substring begins in string
        '''
        last_found = -1
        indexes = list()
        while True:
            last_found = string.find(substring, last_found + 1)
            if last_found == -1:
                break
            indexes.append(last_found)

        return indexes
