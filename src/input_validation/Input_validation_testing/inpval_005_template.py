#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import os
import urllib.request
from fabrica.otg import OTG

__otg__ = "OTG-INPVAL-005"

class Inpval_005_template(OTG):

    def __init__(self, url,dependencia=None, riesgoNegocio=0.0):
        super().__init__(dependencia, __otg__, riesgoNegocio)
        self.url = url
        self.ruta = os.getcwd() + "/src/input_validation/Input_validation_testing/payloads/"

    def get_payloads(self,name_file):
        #fname = "payloadSQL.txt"
        with open(self.ruta+name_file) as f:
            content = f.readlines()
        payloads = [x.strip() for x in content]
        return payloads 

    def query_crawler(self):
        urls = self.obtenerResultado("OTG-INFO-007",self.pentest.id)
        return urls       


    def injection(self, url,msg_error,msg_tech,name_file):
        global lst_msg
        errormsg = msg_error
        errorr = "yes"
        fullbody = ""   

        lst_msg = []
        
        payloads = self.get_payloads(name_file)
        urls = self.query_crawler()

        for url in urls:

            for payload in payloads:
                try:
                    payload = payload
                    fullpayload = url + payload
                    print(fullpayload)
                    lst_msg.append(fullpayload)
                    resp = urllib.request.urlopen(url+payload)
                    print(resp)
                    body = resp.read()                    
                    fullbody = body.decode('utf-8')
                    #print(fullbody)
                    
                except:
                    msg_error = "[-] Probando otro payload " + payload
                    lst_msg.append(msg_error)
                    # print(msg_error)
                    # print(error)
                    errorr = "no"
                    # sys.exit()
                if errormsg in fullbody:
                    print(errormsg)
                    print(fullbody)
                    if errorr == "no":
                        msg_payload = "[-] El payload no puede ejecutarse!"
                        print(msg_payload)
                        lst_msg.append(msg_payload)
                        errorr = "yes"
                    else:
                        msg_injection = "[+] La aplicación web es vulnerable a SQL Injection: {}\nBase de datos: {}!\nURL: {}\nPayload: {}".format(fullpayload,msg_tech,url,payload)
                        print(msg_injection)
                        self.adicionarResultado(msg_injection)
                        lst_msg.append(msg_injection)
                        lst_msg.append(body)
                        print(str(fullbody))
                        print(fullbody)
                else:
                    print(errormsg)
                    print(fullbody)
                    msg_not_inject = "[-] La aplicación web no es vulnerable a SQL Injection para el SGBD {}".format(msg_tech)
                    print(msg_not_inject)
                    lst_msg.append(msg_not_inject)

            #self.write_file()
            self.main()
        

    def write_file(self):

        salida  = os.getcwd() + "/src/Salida/"
        fwrite = "invpal-005-mysql.txt"
        f = open(salida+fwrite, "a")
        for cadena in lst_msg:
            f.write(cadena)
            f.write("\n")
        f.close()

    def main(self):
        #print("================ Iniciando prueba OTG-INPVAL-005 ==================\n")
        #self.injection(self.url)
        #print("================ Fin prueba OTG-INPVAL-005 ==================\n")
        if self.detalles.resultado !="":
            self.adicionarRecomendaciones("filtre los datos de entrada que introduce el usuario en los diferentes campos de texto, verifique que no lleven etiquetas no deseadas o sanitice las entradas")
            self.adicionarRecomendaciones("Realice una lista blanca (una lista de entradas permitidas que puede introducir el usuario)")
            self.calcularRiesgo(__otg__, self.riesgoNegocio)

            self.almacenarBD()
        

    