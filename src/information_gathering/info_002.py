# -*- coding: utf-8 -*-

import os
import re
import sys
import subprocess
from subprocess import Popen, PIPE
from multiprocessing import Pool
from multiprocessing import Process
from fabrica.otg import OTG


#Abarca las pruebas info--002,008 y 009 
__otg__ = "OTG-INFO-002"

dict_version  = {'JQuery':'3.3.1','Drupal':'8.4.0','PHP':'7.2.6','WordPress':'4.9.6','ASP_NET':'4.7.1','Microsoft-IIS':'10.0','Apache':'2.4.33','OpenSSL':'1.1.0h','Joomla':'3.8.8','Java':'2.3','JSF':'2.3.0','JSP':'2.3','Nginx':'1.14.0'}
#OTG-INFO-009: Encontrar tecnologías y verificar si está o no actualizada
#Huellas digitales wep app
class INFO_009(OTG):
    
    def __init__(self, url,dependencia=None, riesgoNegocio=0.0):
        super().__init__(dependencia, __otg__, riesgoNegocio)
        #print("Detectando huellas digitales ...")
        self.url = url
        self.salida = os.getcwd() + "/src/Salida/"
        self.name_finger = "finger_"+str(self.pentest.id)+".txt"
        self.name_db = "database_"+str(self.pentest.id)+".txt"
        

    #identicar tecnologías 
    def finger_printing(self):
        #print("Detectando huellas digitales para " + url + " ...\n")
        
        
        lst_version = []
        #os.system("whatweb -a 3 " + url + "| sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' > tecnsimca.txt")
        with open(self.salida+self.name_finger,"r") as file:
            line = file.read()
            lst_tecnologies = line.split(",")
            for x in lst_tecnologies:
                res = self.technology(x)
                if res != 0:
                    lst_version.append(res)
        
        return lst_version
        
    #lista de las tecnologías según whatweb                                   
    def technology(self,cadena):
        lst_tech = ["JQuery[","Drupal[","PHP[","WordPress[","ASP_NET[","Microsoft-IIS[","Apache[","Microsoft-Sharepoint[","OpenSSL[","Joomla[","Java[","X-Powered-By[","HTTPServer["]
        for tech in lst_tech:
            if tech in cadena:
                tam = len(cadena)
                pos_ini = cadena.find(tech)
                pos_fin = cadena.find("]",pos_ini,tam)
                tmp_cadena = cadena[pos_ini:pos_fin]

                return tmp_cadena
        
        return 0   

    #llenar diccionario con tecnologías encontradas
    def fill_dictionary(self,lst_tech):
        dict_tech = {}
        for x in lst_tech:
            tech = x
            lstjq = tech.split("[")
            name = lstjq[0]
            tmp_version = lstjq[1]
            dict_tech[name]=tmp_version
        
        
        return dict_tech
    #Comparar tecnologías
    def comparison_tech(self,dict_tech):
        #dict_version  = {'JQuery':'3.3.1','Drupal':'8.4.0','PHP':'7.2.6','WordPress':'4.9.6','ASP_NET':'4.7.1','Microsoft-IIS':'10.0','Apache':'2.4.33','OpenSSL':'1.1.0h','Joomla':'3.8.8','Java':'2.3','JSF':'2.3.0','JSP':'2.3'}
        
        for clave in dict_tech:            
            if clave in dict_version:
                val_dict_found =  dict_tech[clave]
                val_dict_ver = dict_version[clave]
                self.comparison_values(val_dict_found,val_dict_ver,clave)
            else:
                pass
        
        self.no_version(dict_tech)
        self.xpower(dict_tech)

    #rellenar el nombre concreto para cada tecnología
    def fill_tech_concret(self,tech):
        dict_tech_full  = {'JQuery':'Framework JavaScript','Drupal':'CMS','PHP':'Lenguaje de Programación','WordPress':'CMS','ASP_NET':'Framework app web','Microsoft-IIS':'Servidor web','Apache':'Servidor web','OpenSSL':'Extensión de criptografía','Joomla':'CMS','Java':'Lenguaje de Programación','JSF':'Framework Java','JSP':'Framework Java','Nginx':'Servidor web'}
        if tech in dict_tech_full:
            return dict_tech_full[tech]
            

    #comparar versiones encontradas con las última versión                 
    def comparison_values(self,val_dict_found, val_dict_ver,clave):
        res_full = self.fill_tech_concret(clave)
        if (val_dict_found < val_dict_ver):
            #self.adicionarResultado(res_full  +":" + clave + ", versión:"+ val_dict_found + ", versión estable:" + val_dict_ver + ", tecnología desactualizada\n")
            cadena = res_full  +":" + clave + ", versión =>"+ val_dict_found + ", estable:" + val_dict_ver + ", tecnología desactualizada\n"
            self.adicionarResultado(cadena)
            print(cadena)
            #self.escribir("Salida/hd.txt",cadena)
        else:
            print(clave +" "+ val_dict_found + " se encuentra en su última Versión")
    
    def no_version(self,dict_tech):
        if "HTTPServer" in dict_tech:
            tec = dict_tech["HTTPServer"]
            cadena = "Se ha detectado una Versión de: {}\n ".format(dict_tech["HTTPServer"])
            #self.adicionarResultado("Se ha detectado una versión de: {}\n ".format(dict_tech["HTTPServer"]))
            self.adicionarResultado(cadena)
            print(cadena)

    def xpower(self,dict_tech):
        if "X-Powered-By" in dict_tech:
            valor = dict_tech["X-Powered-By"]
            if "/" in valor:
                val_tmp = valor.split("/")
                valor_tec = val_tmp[0]
                if valor_tec not in dict_tech:
                    tec_concre = self.fill_tech_concret(valor_tec)
                    version = val_tmp[1]
                    ver_act = dict_version[valor_tec]
                    cadena = "{}: {}, versión =>{}, estable: {}\n".format(tec_concre,valor_tec,version,ver_act)
                    self.adicionarResultado(cadena)
                    print(cadena)
            else:
                res = "Se ha detectado una Versión de: {}".format(valor)
                print(res)
                self.adicionarResultado(res)

    #Detectar base de datos 
    def identity_db(self):
        #print("Detectando base de datos ...")
        dict_db = {'3306':'MySQL','1521':'Oracle','5432':'PostgresSQL','1433':'Microsoft SQL Server'}
        #os.system("nmap -p 1433,1521,3306,5432 " + url + "| sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' > database.txt")
        with open(self.salida+self.name_db,"r") as file:
            for line in file:
                for port in dict_db:            
                    if port in line:
                        if "open" in line:
                            #self.adicionarResultado("Base de datos: " + dict_db[port] + ", puerto: " + port + ", estado: abierto\n")
                            cadena = "Base de datos: " + dict_db[port] + ", puerto: " + port + ", estado: abierto"
                            self.adicionarResultado(cadena)
                            print(cadena)
                            #self.escribir("Salida/db.txt",cadena)

    def file_create(self,filename):
        file = open(filename,"a")
        file.close()
    
    def escribir(self,file_name,cadena):
        file = open(file_name,"a")
        file.write(cadena)
        file.close()

    # detectar sistema operativo
    #MODIFICAR PARA RECIBIR EL PROTOCOLO EN LA URL
    def identify_OS(self,url):
        stdout = Popen('wad -u ' + "http://"+ url + ' -f txt | grep operating-systems', shell=True, stdout=PIPE).stdout
        output = stdout.read()
        output_tmp = str(output)
        if "operating-systems" in output_tmp:
            res_tmp = str(output)
            res2= res_tmp.split("(operating-systems)")
            res2 = str(res2[0])
            res3 = res2.split("\\t")
            print("Sistme operativo: " + res3[1])
                                
        
    def command(self,command):     
        os.system(command)
    
    def other_process(self):
        
        lst_res = self.finger_printing()
        res_dict_fill  = self.fill_dictionary(lst_res)
        self.comparison_tech(res_dict_fill)
        self.identity_db()

    def main(self):
        print("================ Iniciando pruebas OTG-INFO-002-008-009 ==================\n")
        url = self.url
        print("Detectando huellas digitales para la aplicación web: " + url + "\n")
        process1 = "whatweb -a 3 " + url + "| sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' > " + self.salida + self.name_finger
        process2 = "nmap -p 1433,1521,3306,5432 " + url + "| sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' > " + self.salida + self.name_db
        paralle = Pool(2)
        paralle.map(self.command, [process1,process2])
        self.other_process()
        if self.detalles.resultado != "":
            self.adicionarRecomendaciones("Por favor actualice la versión de las tecnologías desactualizadas a la última versión estable para evitar ataques con vulnerabilidades de seguridad conocidas")
            self.calcularRiesgo(__otg__, self.riesgoNegocio)

            self.almacenarBD()
        
        print("================ Fin prueba OTG-INFO-002-008-009 ==================\n")




            


