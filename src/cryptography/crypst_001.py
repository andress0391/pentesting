#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import subprocess
import time
import os
import json
import multiprocessing
from urllib.parse import urlparse
from fabrica.otg import OTG

__otg__ = "OTG-CRYPST-001"

class Crypst_001(OTG):
    def __init__(self, url, dependencia=None, riesgoNegocio=0.0):
        super().__init__(dependencia, __otg__, riesgoNegocio)
        self.url = url
        self.testssl = os.getcwd() + "/src/cryptography/testssl/testssl.sh "
        self.salida = os.getcwd() + "/src/Salida/"+ str(self.pentest.id) +"protoSSL.json"
        self.salida2 = os.getcwd() + "/src/Salida/"+ str(self.pentest.id) +"vulnSSL.json"
        self.omitir = list()
        self.complejidad = 2
    
    def realizarScanner(self, comando):
        subprocess.call([comando],
                        shell=True,
                        stderr=subprocess.STDOUT)
    
    def revisarResultadosVuln(self):
        self.omitir = ["not vulnerable", "not vulnerable , timed out", "not vulnerable, no HTTP compression  - only supplied",
                        "supported", "Make sure you don't use this certificate elsewhere with SSLv2 enabled services",
                        "not vulnerable to DROWN on this host and port", "not vulnerable, no DH EXPORT ciphers",
                        "LOGJAM-common_primes", "scanTime", "service"]
        archivoJson = self.obtenerJson(self.salida2)
        archivoJson = self.eliminarElementos(archivoJson, self.omitir)
        for i in archivoJson:
            self.extraerVuln(i)
    
    def revisarResultadosProto(self):
        self.omitir = ["service", "scanTime"]
        archivoJson = self.obtenerJson(self.salida)
        archivoJson = self.eliminarElementos(archivoJson, self.omitir)
        for i in archivoJson:
            for k,v in i.items():
                if k == "finding" and v == "offered":
                    self.extraerProto(i)

    def extraerProto(self, hallazgo):
        msj = ""
        for k,v in hallazgo.items():
            if k == "id" and (v == "SSLv2" or v == "SSLv3" or v == "TLS1" or v == "TLS1_1"):
                msj += """La aplicación utiliza un protocolo '"""+ v +"""' que atualmente es inseguro y puede generar diversos ataques como por ejemplo POODLE (Padding Oracle On Downgraded Legacy Encryption) o BEAST (Browser Exploit Against SSL/TLS) lo cual permite descifrar y/o interceptar mensajes en texto legible por cualquier persona.
                        Hasta el momento el protocolo recomendado para evitar estos tipos (y otros) de ataque es el protocolo TLS en su versión 1.2 o 1.3\n"""
        self.adicionarResultado(msj)
    
    def extraerVuln(self, hallazgo):
        msj = ""
        for k,v in hallazgo.items():
            if k == "id":
                msj += """La aplicaciones es potencialmente vulnerable ante una ataque de '"""+ v +"""'\n"""
            if k == "cve":
                msj += """Se debe revisar la especificación del CVE """+ v +"""para btener mayor información del ataque\n"""
        self.adicionarResultado(msj)

    
    def eliminarElementos(self, lista, elemEliminar):
        elem = list()
        for i in lista:
            for k,v in i.items():
                for j in elemEliminar:
                    if j in v:
                        elem.append(i)
                        break
        
        for i in elem:
            lista.remove(i)
        
        return lista

    def obtenerJson(self, archivo):
        contenido = ""
        with open(archivo, 'r') as f:
            contenido = f.read()
        f.close
        archivoJson = json.loads(contenido)

        return archivoJson

    def examinarHTTPS(self):
        https = False
        puertos = self.obtenerResultado("OTG-INFO-004", self.pentest.id)
        for p in puertos:
            if "443/tcp  open" in p:
                https = True
                break
                
        return https


    def main(self):
        print("================ Inicio prueba OTG-CRYPST-001 ==================\n")
        https = self.examinarHTTPS()
        if https is True:
            # Ejecutar el subproceso
            tareas = [self.testssl+' --color 0 -oj ' + self.salida + ' -p ' + self.url,
                      self.testssl+' --color 0 -oj ' + self.salida2 + ' -U ' + self.url]
            
            jobs = []
            tamTareas = len(tareas)
            for i in range(tamTareas):
                p = multiprocessing.Process(target=self.realizarScanner, args=(tareas[i],))
                jobs.append(p)
                p.start()
            p.join()
            self.revisarResultadosProto()
            self.revisarResultadosVuln()
            print("\nAnálisis finalizado!")
        else:
            msj = "EL servidor no tiene el puerto 443 (https) disponible"
            self.adicionarResultado(msj)
            print(msj)
        
        if self.detalles.resultado != "":
            self.adicionarRecomendaciones("")
            self.calcularRiesgo(__otg__, self.riesgoNegocio)
            
            self.almacenarBD()
        print("================ Fin prueba OTG-CRYPST-001 ==================\n")

# ENVIAR IP NO URL
# c = Crypst_001("176.28.50.165")
# c.main()
