#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import subprocess
import time
import threading
import os
from urllib.parse import urlparse

esperar = 0

__titulo__ = "Protección insufuciente en la capa de transporte"
__descripcion__ = "Los datos sensibles deben estar protegidos cuando se transmiten a través de la red. Tales datos pueden incluir credenciales de usuario y tarjetas de crédito. Como regla general, si los datos deben protegerse cuando se almacenan, también se deben proteger durante la transmisión. Incluso si hay algoritmos de cifrado fuerte, se puede usar alguna configuración incorrecta en el servidor para forzar el uso de un cifrado débil, o en el peor de los casos, deshabilitar tal algoritmo, lo que permite a un atacante acceder al supuesto canal de comunicación seguro. Se pueden usar otras configuraciones erróneas para realizar un ataque de denegación de servicio."

class Crypst_001(object):
    def __init__(self, url):
        self.url = url
        self.testssl = "/src/cryptography/testssl/testssl.sh "
        self.salida = "/src/Salida/SSL_TLS.txt"
        self.complejidad = 2

    def ejecutarTestSSL(self):
        global esperar
        with open(os.getcwd()+self.salida, "w") as f:
            subprocess.call([os.getcwd()+self.testssl+' --color 0 ' + self.url],
                            shell=True,
                            stdout=f,
                            stderr=subprocess.STDOUT)
            esperar = 1
        f.close()


    def examinarHTTPS(self):
        import socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((self.url, 443))
            s.shutdown(2)
            return True
        except:
            return False


    def main(self):
        global esperar
        print("================ Inicio prueba OTG-CRYPST-001 ==================\n")
        https = self.examinarHTTPS()
        if https is True:
            # Ejecutar el subproceso
            hilo = threading.Thread(target=self.ejecutarTestSSL)
            hilo.start()
            # Mostrar mensaje de espera
            mensaje = "Ejecutando el análisis"
            suspension = "."
            print(mensaje, end="", flush=True)
            while esperar == 0:
                time.sleep(1)
                print(suspension, end="", flush=True)
            print("\nAnálisis finalizado!")
        else:
            print("EL servidor no tiene el puert 443 (https) disponible")
        print("================ Fin prueba OTG-CRYPST-001 ==================\n")

# ENVIAR IP NO URL
#c = Crypst_001("10.200.1.16")
#c.main()
