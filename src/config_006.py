#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import requests

metodosArbitratios = ['JEFF', 'CATS', 'FOOBAR', 'PROPFIND']
salida = list()


def obtenerMetHTTP(url):
    '''
    Obtiene los métodos HTTP que permite el servidor
    '''
    r = requests.options(url)
    if 'Allow' not in r.headers:
        print("No es posible detectar los métodos HTTP permitidos por el servidor web")
        r.close()
        return -1
    else:
        metodosDisponibles = r.headers['Allow'].split(", ")
        salida.append("Métodos disponibles: %s\n" % metodosDisponibles)
        print("Métodos disponibles: %s" % metodosDisponibles)
        r.close()
        return metodosDisponibles


def vulnerableXST(url, metodosDisponibles):
    '''
    Si el servidor permite el método TRACE, se verifica si es vulnerable a XST
    '''
    if "TRACE" in metodosDisponibles:
        payload = ["TRACE", "Host", url]
        print("Enviando petición: TRACE / HTTP/1.1")
        r = requests.request(
            method=payload[0],
            url=url,
            params={payload[1]: payload[2]})

        if r.status_code in [405, 501]:
            return -1
            r.close()
        else:
            datos = r.text.lower()
            if payload[1].lower() in datos:
                return 1
            else:
                return -1
            r.close()
    else:
        return -1


def pruebaMetArbitrarios(url):
    '''
    Enviar peticiones con métodos arbitrarios
    '''
    vulnerable = 0
    for i in metodosArbitratios:
        r = requests.request(
            method=i,
            url=url)
        salida.append("Enviando petición: %s / HTTP/1.1\nRespuesta: %s\n" % (i, r.status_code))
        print("Enviando petición: %s / HTTP/1.1\nRespuesta: %s" % (i, r.status_code))
        if r.status_code not in [405, 501]:
            salida.append("Vulnerable a peticiones con métodos '%s' arbitrarios\n" % i)
            print("Vulnerable a peticiones con métodos '%s' arbitrarios" % i)
            vulnerable = 1
    if vulnerable != 1:
        salida.append("No vulnerable a peticiones con métodos arbitrarios\n")
        print("No vulnerable a peticiones con métodos arbitrarios\n")


def escribirArchivo():
    with open("Salida/MetodosArbitrarios.txt", "w") as f:
        for x in salida:
            f.write(x)
    f.close()


def main(url):
    print("================ Inicio prueba OTG-CONFIG-006 ==================\n")
    xst = -1
    metodosDisponibles = obtenerMetHTTP(url)
    if metodosDisponibles != -1:
        xst = vulnerableXST(url, metodosDisponibles)
    if xst == 1:
        salida.append("Vulnerable a Cross-Site Tracing (XST)\n")
        print("Vulnerable a Cross-Site Tracing (XST)\n")
    elif xst == -1:
        salida.append("No vulnerable a Cross-Site Tracing (XST)\n")
        print("No vulnerable a Cross-Site Tracing (XST)\n")
    pruebaMetArbitrarios(url)
    escribirArchivo()
    print("================ Fin prueba OTG-CONFIG-006 ==================\n")


# main()
