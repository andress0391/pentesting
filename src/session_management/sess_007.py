#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from src.lib.utilLogin import iniciarSesion
import time
from fabrica.prueba import Prueba

class Sess_007(Prueba):
    def __init__(self, url, usuarioPrueba):
        super().__init__()
        self.url = url
        self.usuarioPrueba = usuarioPrueba
        self.complejidad = 2
    
    def verificarCookie(self, cookieIni, cookieFin):
        '''
        Se compara la cookie inicial (cookieIni) con la que se inició sesión,
        con la cookie final (cookieFin) que es la "nueva" cookie despúes de
        esperar 15 minutos de inactividad.

        return:
        Diccionario con atributos y valores si la cookie no cambia después de 15 minutos.
        Diccionario vacío si la cookie cambia después de 15 minutos.
        '''
        import operator

        sesion = True
        # Ordenar los valores de las cookies
        cookieIni = sorted(cookieIni.items(), key=operator.itemgetter(0))
        cookieFin = sorted(cookieFin.items(), key=operator.itemgetter(0))

        tamIni = len(cookieIni)
        tamFin = len(cookieFin)

        # Comparar si se han removido parámetros de la cookie
        if tamFin != tamIni:
            return sesion
        elif tamFin == tamIni:
            resultado = dict()
            for x, y in zip(cookieIni, cookieFin):
                if x[0] == y[0] and x[1] == y[1]:
                    resultado.update({x[0]:x[1]})
            if len(resultado) >= 1:
                sesion = False
                return sesion
            else:
                return sesion
    
    def detalle(self):
        pass

    def main(self):
        '''
        Realizar la prueba OTG-SESS-007 para determinar mecanismos de cierre de sesión por inactividad.
        La url debe ser la dirección donde se encuentra el formulario de inicio de sesión. Ej:https://example.com/login
        El usuario de prueba debe ser una lista con el usuario y la respectiva contraseña    
        '''
        b, r = iniciarSesion(self.url, self.usuarioPrueba)
        
        # Obtener la cookie después de iniciar sesión
        cookieIni = b.session.cookies.get_dict()
        # Esperar 10 minutos
        #time.sleep(600)
        # Volver a realizar una petición para obtener la cookie final
        b.open(self.url)
        # Obtener cookie después de esperar 15 minutos de inactividad
        cookieFin = b.session.cookies.get_dict()
        cookie = self.verificarCookie(cookieIni, cookieFin)
        # Determinar si hubo cambio
        msj = ""
        if cookie is False:
            msj = "Después de 10 minutos de inactividad la aplicación no presenta un mecanismo para el cierre de sesión."
            print(msj)
            self.adicionarResultado(msj)
        else:
            print("Sí hay un mecnismo de cierre de sesión por inactividad.")
        b.close()
        
        if self.detalles.resultado != "":
            # RECOMENDACIONES
            return self.detalles
        else:
            return None
    
#url = "https://simca.unicauca.edu.co/simca/"
#usuarioPrueba = ['saps_29', '990B8.29']
#url = "https://github.com/login"
#usuarioPrueba = ['pordnajela', 'Santiago9529']
#p = Sess_007(url, usuarioPrueba)
#p.main()
