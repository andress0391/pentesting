#!/usr/bin/python3
# -*- encoding: utf-8 -*-

import requests
from urllib.parse import urlparse
from .sess_util import Cookie
from fabrica.otg import OTG

class Sess_002(OTG):
    def __init__(self, url, dependencia=None):
        super().__init__(dependencia)
        self.url = url
        self.cookie = None
        self.complejidad = 1
    
    def revisarHttponly(self, cookie):
        if cookie.httponly is False:
            msj = "Bandera 'HttpOnly' no encontrada."
            print(msj)
            self.adicionarResultado(msj)

    def revisarSecure(self, cookie):
        if cookie.secure is False:
            msj = "Atributo 'secure' no encontrada."
            print(msj)
            self.adicionarResultado(msj)

    def revisarPath(self, cookie):
        msj = ""
        if cookie.path == "/":
            msj = "Se recomienda modificar el valor del atributo 'path', para evitar que la cookie sea enviada a cualquier aplicación dentro del servidor."
            print(msj)
            self.adicionarResultado(msj)
        else:
            path = cookie.path.split("/")
            if len(path) == 2:
                msj = "Atributo 'path' debe modificarse '%s' -> '%s/'." % (cookie.path,cookie.path)
                print(msj)
                self.adicionarResultado(msj)

    def revisarDomain(self, cookie):
        if cookie.domine[0] == ".":
            msj = "La cookie puede ser usada en otros servidores que pueden ser vulnerables. Por ejemplo: test%s" % cookie.domine
            print(msj)
            self.adicionarResultado(msj)
            return 
    
    def revisarExpires(self, cookie):
        if cookie.expires != None:
            print(cookie.expires)
    
    def obtenerAtributos(self, cookiesReq):
        cookies = list()
        httponly = False
        for c in cookiesReq:
            if 'httponly' in c._rest.keys() or 'HttpOnly' in c._rest.keys():
                httponly = True
            else:
                httponly = False
            cookies.append(Cookie(c.name, c.value, c.path, c.secure, httponly, c.domain, c.expires,c.discard))
            
        self.cookie = cookies

    def main(self):
        print("================ Inicio prueba OTG-SESS-002 ==================\n")
        u = urlparse(self.url)
        self.url = u.scheme + "://" + u.netloc + u.path

        session = requests.Session()
        req = session.get(self.url)
        cookiesReq = req.cookies
        
        self.obtenerAtributos(cookiesReq)
        i = 1
        for c in self.cookie:
            self.adicionarResultado("Cookie %s" % i)
            print("Cookie %s" % i)
            self.revisarHttponly(c)
            self.revisarSecure(c)
            self.revisarPath(c)
            self.revisarDomain(c)
            self.revisarExpires(c)
            i += 1
            if self.detalles.resultado != "":
                # AÑADIR Recomendaciones
                return self.detalles
            else:
                return None
        print("================ Fin prueba OTG-SESS-002 ==================\n")


#url = "https://simca.unicauca.edu.co/simca"
#url = "https://github.com"
#url = "http://demo.testfire.net/"
#p = Sess_002(url)
#p.main()
