#!/usr/bin/env python3

from collections import defaultdict
from lxml import html

__version__ = '1.2.0'

def _form_score(form):
    #print(form.inputs)
    score = 0
    # In case of user/pass or user/pass/remember-me
    if len(form.inputs.keys()) in (2, 3):
        score += 10

    typecount = defaultdict(int)
    for x in form.inputs:
        type_ = x.type if isinstance(x, html.InputElement) else "other"
        typecount[type_] += 1

    if typecount['text'] > 1:
        score += 10
    if not typecount['text']:
        score -= 10

    if typecount['password'] == 1:
        score += 10
    if not typecount['password']:
        score -= 10

    if typecount['checkbox'] > 1:
        score -= 15
    if typecount['radio']:
        score -= 15

    return score


def _pick_form(forms):
    """Return the form most likely to be a login form"""
    return sorted(forms, key=_form_score, reverse=True)[0]


def _pick_fields(form):
    """Return the most likely field names for username and password"""
    userfield = passfield = emailfield = None
    for x in form.inputs:
        if not isinstance(x, html.InputElement):
            continue

        type_ = x.type
        if type_ == 'password' and passfield is None:
            passfield = x.name
        elif type_ == 'email' and emailfield is None:
            emailfield = x.name
        elif type_ == 'text' and userfield is None:
            userfield = x.name

    return emailfield or userfield, passfield


def submit_value(form):
    """Returns the value for the submit input, if any"""
    for x in form.inputs:
        if not isinstance(x, html.InputElement):
            continue

        if x.type == "submit" and x.name:
            return [(x.name, x.value)]
    else:
        return []

def fill_login_form(url, body):
    doc = html.document_fromstring(body, base_url=url)
    form = _pick_form(doc.xpath('//form'))
    return form.action or form.base_url, form.method
